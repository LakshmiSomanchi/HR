# Directory: pmu-user-management

## 1. Django Backend Setup

### pmu_user_mgmt/settings.py (partial)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hr',
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# hr/models.py
from django.db import models

class Candidate(models.Model):
    name = models.CharField(max_length=255)
    designation = models.CharField(max_length=255)
    project = models.CharField(max_length=255)
    location = models.CharField(max_length=255)
    status = models.CharField(max_length=50, default='Pending')

    def __str__(self):
        return self.name

class Interview(models.Model):
    candidate = models.ForeignKey(Candidate, on_delete=models.CASCADE)
    date = models.DateField()
    interviewer = models.CharField(max_length=255)
    strengths = models.TextField()
    weaknesses = models.TextField()
    qualification = models.IntegerField()
    experience = models.IntegerField()
    communication_written = models.IntegerField()
    communication_oral = models.IntegerField()
    problem_solving = models.IntegerField()
    team_capabilities = models.IntegerField()
    comparison = models.CharField(max_length=50)
    final_remarks = models.TextField()
    decision = models.CharField(max_length=50)

    def __str__(self):
        return f"Interview - {self.candidate.name}"

#hr/admin.py

from django.contrib import admin
from .models import Candidate, Interview

admin.site.register(Candidate)
admin.site.register(Interview)

#manage.py

#Standard Django manage.py file generated by `django-admin startproject`.

# 2. Streamlit Frontend (HR Exclusive)

#streamlit_app/main.py
import streamlit as st
import os
import django
import datetime
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# HR access only
ALLOWED_HR_EMAILS = ["hr1@example.com", "hr2@example.com"]

st.session_state.setdefault("role", None)

st.title("HR Management Portal")

if not st.session_state.role:
    with st.form("auth_form"):
        email = st.text_input("Enter your email")
        submitted = st.form_submit_button("Login")

    if submitted:
        if email in ALLOWED_HR_EMAILS:
            st.session_state.role = "HR"
        else:
            st.error("Unauthorized email")

if st.session_state.role == "HR":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pmu_user_mgmt.settings")
    django.setup()

    from hr.models import Candidate, Interview

    st.subheader("Add New Candidate")

    with st.form("candidate_form"):
        name = st.text_input("Name")
        designation = st.text_input("Designation")
        project = st.text_input("Project")
        location = st.text_input("Location")
        submitted = st.form_submit_button("Create Candidate")

    if submitted:
        c = Candidate.objects.create(name=name, designation=designation, project=project, location=location)
        st.success(f"Candidate {c.name} added.")

    candidates = Candidate.objects.all()
    candidate_names = [c.name for c in candidates]

    st.subheader("Interview Assessment")
    selected_name = st.selectbox("Candidate", candidate_names)
    selected_candidate = next((c for c in candidates if c.name == selected_name), None)

    with st.form("interview_form"):
        date = st.date_input("Interview Date", datetime.date.today())
        interviewer = st.text_input("Interviewer Name")
        strengths = st.text_area("Strengths (Min 2)")
        weaknesses = st.text_area("Weaknesses (Min 2)")

        qualification = st.slider("Qualification", 1, 5, 3)
        experience = st.slider("Previous Work Experience", 1, 5, 3)
        comm_written = st.slider("Communication - Written", 1, 5, 3)
        comm_oral = st.slider("Communication - Oral", 1, 5, 3)
        problem_solving = st.slider("Problem Solving", 1, 5, 3)
        team_capabilities = st.slider("Team Capabilities", 1, 5, 3)

        comparison = st.selectbox("Comparison to existing resource", ["Below Par", "At Par", "Above Par"])
        remarks = st.text_area("Final Remarks")
        decision = st.selectbox("Decision", ["Recommended for Hire", "Reject", "On Hold"])

        interview_submitted = st.form_submit_button("Submit Interview")

    if interview_submitted and selected_candidate:
        interview = Interview.objects.create(
            candidate=selected_candidate,
            date=date,
            interviewer=interviewer,
            strengths=strengths,
            weaknesses=weaknesses,
            qualification=qualification,
            experience=experience,
            communication_written=comm_written,
            communication_oral=comm_oral,
            problem_solving=problem_solving,
            team_capabilities=team_capabilities,
            comparison=comparison,
            final_remarks=remarks,
            decision=decision,
        )
        st.success("Interview submitted.")

        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=letter)
        p.drawString(100, 750, f"Interview Report: {selected_candidate.name}")
        p.drawString(100, 730, f"Date: {date}")
        p.drawString(100, 710, f"Interviewer: {interviewer}")
        p.drawString(100, 690, f"Strengths: {strengths}")
        p.drawString(100, 670, f"Weaknesses: {weaknesses}")
        p.drawString(100, 650, f"Qualification: {qualification}")
        p.drawString(100, 630, f"Experience: {experience}")
        p.drawString(100, 610, f"Comm. Written: {comm_written}, Oral: {comm_oral}")
        p.drawString(100, 590, f"Problem Solving: {problem_solving}")
        p.drawString(100, 570, f"Team Capabilities: {team_capabilities}")
        p.drawString(100, 550, f"Comparison: {comparison}")
        p.drawString(100, 530, f"Final Remarks: {remarks}")
        p.drawString(100, 510, f"Decision: {decision}")
        p.showPage()
        p.save()

        st.download_button(
            label="Download Interview Report PDF",
            data=buffer.getvalue(),
            file_name=f"{selected_candidate.name}_interview.pdf",
            mime="application/pdf",
        )
